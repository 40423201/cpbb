<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="amd.20150913232631.1"><vh>@settings</vh>
<v t="amd.20150913232631.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="amd.20150913232631.3"><vh>@string initial_split_orientation = horizontal</vh></v>
<v t="amd.20150915153206.1"><vh>專案說明</vh>
<v t="amd.20150919102209.1" a="E"><vh>使用工具</vh>
<v t="amd.20150919112415.1"><vh>影片檔案</vh></v>
</v>
<v t="amd.20150919102541.1"><vh>pelican 與 Markdown</vh></v>
</v>
</v>
<v t="amd.20150919102739.1"><vh>專案架構</vh>
<v t="amd.20150919113520.1"><vh>@edit .gitignore</vh></v>
<v t="amd.20150919103428.1"><vh>reveal.js 設定</vh></v>
<v t="amd.20150919103341.1"><vh>Jupyter 設定</vh>
<v t="amd.20150919103923.1"><vh>設定檔案位置</vh></v>
<v t="amd.20150919104249.1"><vh>檢查 profile 位置</vh></v>
</v>
<v t="amd.20150919103357.1"><vh>pelican 設定</vh></v>
<v t="amd.20150919112710.1" a="E"><vh>@path pelican</vh>
<v t="amd.20150919113340.1"><vh>以下為與 pelican 有關的設定檔案</vh></v>
<v t="amd.20150919113132.1"><vh>@edit publishconf.py</vh></v>
</v>
</v>
<v t="amd.20150919113957.1" a="E"><vh>以下為 pelican 文章</vh>
<v t="leo.20160109222230.1"><vh>@button admin pelican</vh></v>
<v t="leo.20160109213119.1"><vh>@button user pelican</vh></v>
</v>
<v t="leo.20160109215932.1"><vh>@path pelican</vh>
<v t="leo.20160109215932.2"><vh>以下為設定檔 ------------</vh></v>
<v t="leo.20160109215932.3"><vh>@edit publishconf.py</vh></v>
<v t="leo.20160109220107.1"><vh>@path content</vh>
<v t="leo.20160109220107.2"><vh>@edit 2015cphww1.md</vh></v>
<v t="leo.20160109220107.3"><vh>@edit 2015cphww7.md</vh></v>
<v t="leo.20160109220107.4"><vh>@edit 2015cpnote7.md</vh></v>
<v t="leo.20160109220107.5"><vh>@edit 2015cpnote1.md</vh></v>
</v>
</v>
<v t="leo.20160109222332.1"><vh>@button pelican content</vh></v>
<v t="leo.20160109222126.1"><vh>@button user pelican</vh></v>
<v t="leo.20160109213331.1" a="E"><vh>@path ./</vh>
<v t="leo.20160109213331.2"><vh>以下為投影片 ------------</vh></v>
<v t="leo.20160109213331.3"><vh>@edit 40423201_cp_w1_p.html</vh></v>
<v t="leo.20160109213331.4"><vh>@edit 40423201_cp_w2_p.html</vh></v>
<v t="leo.20160109213331.5"><vh>@edit 40423201_cp_w3_p.html</vh></v>
<v t="leo.20160109213331.6"><vh>@edit 40423201_cp_w4_p.html</vh></v>
<v t="leo.20160109213331.7"><vh>@edit 40423201_cp_w5_p.html</vh></v>
<v t="leo.20160109213331.8"><vh>@edit 40423201_cp_w6_p.html</vh></v>
<v t="leo.20160109213331.9"><vh>@edit 40423201_cp_w7_p.html</vh></v>
<v t="leo.20160109213331.10"><vh>@edit 40423201_cp_w8_p.html</vh></v>
<v t="leo.20160109213331.11"><vh>@edit 40423201_cp_w9_p.html</vh></v>
<v t="leo.20160109213331.12"><vh>@edit 40423201_cp_w11_p.html</vh></v>
<v t="leo.20160109213331.13"><vh>@edit 40423201_cp_w12_p.html</vh></v>
<v t="leo.20160109213331.14"><vh>@edit 40423201_cp_w13_p.html</vh></v>
<v t="leo.20160109213331.15"><vh>@edit 40423201_cp_w14_p.html</vh></v>
<v t="leo.20160109213331.16"><vh>@edit 40423201_cp_w15_p.html</vh></v>
<v t="leo.20160109213331.17"><vh>@edit 40423201_cp_w17_p.html</vh></v>
<v t="leo.20160109220457.1" a="E"><vh>@path pelican</vh>
<v t="leo.20160109220457.2"><vh>以下為設定檔 ------------</vh></v>
<v t="leo.20160109220457.3"><vh>@edit publishconf.py</vh></v>
<v t="leo.20160109220457.4"><vh>@path content</vh>
<v t="leo.20160109220457.5"><vh>@edit 2015cphww1.md</vh></v>
<v t="leo.20160109220457.6"><vh>@edit 2015cphww7.md</vh></v>
<v t="leo.20160109220457.7"><vh>@edit 2015cpnote7.md</vh></v>
<v t="leo.20160109220457.8"><vh>@edit 2015cpnote1.md</vh></v>
</v>
</v>
<v t="leo.20160109220402.1" a="E"><vh>@path content</vh>
<v t="leo.20160109220538.1"><vh>以下為網誌 md 檔案 ------------</vh></v>
<v t="leo.20160109220558.1"><vh>@edit 2015cphww1.md</vh></v>
<v t="leo.20160109220625.1"><vh>@edit 40423201_cp_w1.md</vh></v>
<v t="leo.20160109220632.1"><vh>@edit 40423201_cp_w2.md</vh></v>
<v t="leo.20160109220638.1"><vh>@edit 40423201_cp_w3.md</vh></v>
<v t="leo.20160109220645.1"><vh>@edit 40423201_cp_w4.md</vh></v>
<v t="leo.20160109220651.1"><vh>@edit 40423201_cp_w5.md</vh></v>
<v t="leo.20160109220658.1"><vh>@edit 40423201_cp_w6.md</vh></v>
<v t="leo.20160109220706.1"><vh>@edit 40423201_cp_w7.md</vh></v>
<v t="leo.20160109220714.1"><vh>@edit 40423201_cp_w8.md</vh></v>
<v t="leo.20160109220720.1"><vh>@edit 40423201_cp_w9.md</vh></v>
<v t="leo.20160109220726.1"><vh>@edit 40423201_cp_w11.md</vh></v>
<v t="leo.20160109220731.1"><vh>@edit 40423201_cp_w12.md</vh></v>
<v t="leo.20160109220736.1"><vh>@edit 40423201_cp_w13.md</vh></v>
<v t="leo.20160109220742.1"><vh>@edit 40423201_cp_w14.md</vh></v>
<v t="leo.20160109220749.1"><vh>@edit 40423201_cp_w15.md</vh></v>
<v t="leo.20160109220754.1"><vh>@edit 40423201_cp_w17.md</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20150913232631.1"></t>
<t tx="amd.20150913232631.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="amd.20150913232631.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="amd.20150915153206.1">2015.09.15

將 2014 的 index.html 與 cadpbw1.html 與 2015 最新的 reveal 框架檔案合併
此後將以 v31ref.html 中的語法為主

</t>
<t tx="amd.20150919102209.1">本專案

利用 Jupyter 產生 IPython notebook, 然後整合入 pelican 網誌

利用 github pages 在 github.io 網站上伺服網頁資料

利用 reveal.js 產生投影片

利用 pelican 與 Markdown 產生網誌文章

利用 disqus 建立互動留言系統</t>
<t tx="amd.20150919102541.1">在 Anaconda 3 中只要

    pip install pelican Markdown 

安裝 pelican 與 Markdown Python 模組即可

若是在 Ubuntu 中則可以透過

    sudo pip3 install pelican Markdown 

安裝 pelican 與 Markdown Python 模組</t>
<t tx="amd.20150919102739.1">主要為 reveal.js 的簡報目錄架構, 其他子目錄為

images - 存放簡報與 pelican 網誌所需要的影像檔案

pelican - 存放 pelican 專案資料檔, 並且設法讓 pelican 所產生的 output 檔案直接存放到上層 reveal.js 根目錄

notebook - 存放 Jupyter 的 IPython notebook 檔案, 然後再由 pelican 設定, 將內容放入 blog 文章中

</t>
<t tx="amd.20150919103341.1">REM start.bat 中 取電腦 IP 與 Jupyter 啟動

REM 取 IPV4 IP address
for /f "delims=[] tokens=2" %%a in ('ping -4 %computername% -n 1 ^| findstr "["') do (set thisip=%%a)
REM echo %thisip%
REM 取 IPV6 IP address
REM for /f "delims=[] tokens=2" %%a in ('ping %computername% -n 1 ^| findstr "["') do (set thisip=%%a)
REM echo %thisip%
REM 啟動 Jupyter
cd notebook
start %Disk%:\Anaconda3\python.exe "%Disk%:\Anaconda3\Scripts\ipython-script.py" notebook --ip=%thisip% --certfile=%Disk%:\home\ssl_cert.pem --profile=nbserver</t>
<t tx="amd.20150919103357.1">打算利用

pelican pelican -o ./../ -s publishconf.py

-o 指定 ouput 所在目錄, 這裡使用上一層目錄, 

-s 則指定 setting, 這裡採用 publishconf.py 中的設定

將位於專案中 pelican 目錄內的 .md 檔案, 轉為 html 網誌格式, 然後存在 reveal.js 的架構目錄中

也就是 index.html 是由 pelican 控制</t>
<t tx="amd.20150919103428.1"></t>
<t tx="amd.20150919103923.1">home/.ipython/profile_nbserver/ipython_notebook_config.py

內容為:

# Password to use for web authentication
c = get_config()
# password is  "2015cp"
c.NotebookApp.password = u'sha1:864c0bcdb94e:8a396ef692ef3cc552177f1b1c48cec70c7a32df'
c.NotebookApp.port = 8888

產生 password 的程式碼:

from IPython.lib import passwd
passwd()

</t>
<t tx="amd.20150919104249.1">@language python
# show 出 ipython notebook 所使用的 profile 目錄
# 這裡應該會傳回 {'location': 'y:\\home\\.ipython\\profile_nbserver'}
# 表示 custom.js 位於 'y:\\home\\.ipython\\profile_nbserver\\static\\custom'
'''在 custom.js 中加入
require(["base/js/events"], function (events) {
    events.on("app_initialized.NotebookApp", function () {
    /* load your extension here */
    IPython.load_extensions('read-only');
    });
});
就可以自動導入'y:\\home\\.ipython\\nbextensions\read-only.js' 延伸檔案
read-only toggle 為 Alt+R
'''
# 以下為操作方法
'''當使用者選擇某一 cell, 然後按下 Alt+R, 則 cell 內原本為灰色將會變成白色, 表示
cell 為 read only
''''''
import IPython
ip=IPython.get_ipython()
ip.config.ProfileDir </t>
<t tx="amd.20150919112415.1">使用 Vimeo</t>
<t tx="amd.20150919112710.1"></t>
<t tx="amd.20150919113340.1"></t>
<t tx="amd.20150919113957.1"></t>
<t tx="leo.20160109213119.1">@language python
import os
os.system("pelican pelican/content -o ./ -s pelican/publishconf.py -t ../../theme/pelican-octopress")
g.es("user pelican 執行完畢")</t>
<t tx="leo.20160109213331.1"></t>
<t tx="leo.20160109213331.2"></t>
<t tx="leo.20160109215932.1"></t>
<t tx="leo.20160109215932.2"></t>
<t tx="leo.20160109220107.1"></t>
<t tx="leo.20160109220402.1"></t>
<t tx="leo.20160109220457.1"></t>
<t tx="leo.20160109220457.2"></t>
<t tx="leo.20160109220457.4"></t>
<t tx="leo.20160109220538.1"></t>
<t tx="leo.20160109220558.1">@language md
Title: 2015 計算機程式 作業一
Date: 2015-09-19 11:41
Modified: 2015-09-19 11:41
Category: Python
Tags: pelican, publishing
Slug: 2015cp_hw_w1
Authors: coursemdetw
Summary: 作業一摘要
以下為作業一內容

利用 iframe 嵌入投影片:

&lt;iframe src="simplest.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業一投影片](simplest.html){:target="_blank"}

使用 H1 標題
============

文字段落間若要跳行, 必須插入空白行, 否則將會被 Markdown 視連續的資料

使用. *斜體文字*, **黑體文字**, 以及 `單線文字`. 表列資料可以寫為:

  * 第1項說明
  * 第2項說明
  * 第3項說明

特別注意 --- 不包括星號 --- 表列文字從第四欄位開始.

&gt; 引用的內容寫在這裡
&gt; 主要是以大於的符號開頭.
&gt;
&gt; 其中也可以利用空白行隔開,
&gt; 整區都是引用內容的範圍.

em-dash 符號是3個 dashes. 利用兩個 dashes 來連接開始與結束 (ex., "這個禮拜要閱讀章節 12--14"). 3個逗點 ... 則會被轉為 ellipsis.
pelican 可以支援 unicode. ☺

H2 標題
------------

有數字的表列資料:

 1. 第1項
 2. 第2項
 3. 第3項

跟前面一樣, 文字從第四個欄位開始.

程式碼的表達:

    # for 重複迴圈 ...
    for i in 1 .. 10 { 呼叫特定函式(i) }

這裡也是要空4個 space 鍵. 

除了每一行空4個空白, 也可以使用 delimited 來界定程式碼範圍, 就像這樣:

~~~
define foobar() {
    print("歡迎進入程式的世界!")
}
~~~

(這樣的表達比較容易用來複製程式碼內容).

python 的程式碼, 可以寫成下列格式

~~~python
import time
# 以下會從 0 數到 9
for i in range(10):
    # 稍微暫停一下
    time.sleep(0.5)
    print(i)
~~~

### H3 標題 ###

以下則為內嵌式的表列法t:

 1. 首先, 將完成下列元件的設計:

      * 轉向機構
      * 煞車系統
      * 踩踏機構

 2. 接著連繫工業設計部門.

 3. 確定上述元件的各項設計與用料都符合原始設計規格的要求
    查驗表:

        各元件材質
        車蓋顏色
        機構調校流程
        需要熱處理的元件列表

    完成上述查驗後, 請通知品保部門, 以便接續處理.

特別注意各階資料都以內縮4個空白鍵來加以區隔, 包含最後一行.

Markdown 的超文件連結寫法 [連到 Google](http://www.google.com){:target="_blank"}, 也可以連到同目錄下的檔案 [cadpbw1.html](cadpbw1.html){:target="_blank"}, 也能使用註腳 [^1].

[^1]: 註腳會連結到這裡.

放入圖檔, 可以直接利用 html 的 img 標註:

&lt;img src="images/3d_parts_viewer.png" width="250" alt="3D 零件檢視"&gt;&lt;/img&gt;

Vimeo 影片嵌入(直接從 Vimeo 影片上的 Share 複製 html 碼):

&lt;iframe src="https://player.vimeo.com/video/137724068" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/137724068"&gt;Welcome Speech&lt;/a&gt; from &lt;a href="https://vimeo.com/user24079973"&gt;虎尾科大機械設計工程系 KMOL&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</t>
<t tx="leo.20160109220625.1">@language md
Title: 2015 計算機程式 作業ㄧ
Date: 2015-9/18 10:41
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w1
Authors: 40423201
Summary: 作業ㄧ摘要

以下為作業ㄧ內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w1_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業四投影片](40423201_cp_w1_p.html){:target="_blank"}


</t>
<t tx="leo.20160109220632.1">@language md
Title: 2015 計算機程式 作業二
Date: 2015-9/25 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w2
Authors: 40423201
Summary: 作業二摘要

以下為作業二內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w2_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w2_p.html){:target="_blank"}</t>
<t tx="leo.20160109220638.1">@language md
Title: 2015 計算機程式 作業三
Date: 2015-10/2 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w3
Authors: 40423201
Summary: 作業三摘要

以下為作業三內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w3_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w3_p.html){:target="_blank"}</t>
<t tx="leo.20160109220645.1">@language md
Title: 2015 計算機程式 作業四
Date: 2015-10/9 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w4
Authors: 40423201
Summary: 作業四摘要

以下為作業四內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w4_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w4_p.html){:target="_blank"}</t>
<t tx="leo.20160109220651.1">@language md
Title: 2015 計算機程式 作業五
Date: 2015-10/16 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w5
Authors: 40423201
Summary: 作業五摘要

以下為作業五內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w5_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w5_p.html){:target="_blank"}</t>
<t tx="leo.20160109220658.1">@language md
Title: 2015 計算機程式 作業六
Date: 2015-10/30 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w6
Authors: 40423201
Summary: 作業六摘要

以下為作業六內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w6_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w6_p.html){:target="_blank"}

&lt;iframe src="https://player.vimeo.com/video/144981300" width="500" height="294" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/144981300"&gt;第六週計算機程式操作bandicam 2015-11-07 23-21-47-182&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</t>
<t tx="leo.20160109220706.1">@language md
Title: 2015 計算機程式 作業七
Date: 2015-11/06 12:30
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w7
Authors: 40423201
Summary: 作業七摘要

以下為作業七內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w7_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w7_p.html){:target="_blank"}</t>
<t tx="leo.20160109220714.1">@language md
Title: 2015 計算機程式 作業八
Date: 2015-11/06 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w8
Authors: 40423201
Summary: 作業八摘要

以下為作業八內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w8_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w8_p.html){:target="_blank"}</t>
<t tx="leo.20160109220720.1">@language md
Title: 2015 計算機程式 作業九
Date: 2015-11/8 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w9
Authors: 40423201
Summary: 作業九摘要

以下為作業九內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w9_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w9_p.html){:target="_blank"}

&lt;iframe src="https://player.vimeo.com/video/145030495" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/145030495"&gt;第九週計算機程式影片操作bandicam 2015-11-08 15-27-55-057&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</t>
<t tx="leo.20160109220726.1">@language md
Title: 2015 計算機程式 作業十
Date: 2015-11/27 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w11
Authors: 40423201
Summary: 作業十摘要

以下為作業十內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w11_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w11_p.html){:target="_blank"}

&lt;iframe src="https://player.vimeo.com/video/151010897" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/151010897"&gt;ˋ&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</t>
<t tx="leo.20160109220731.1">@language md
Title: 2015 計算機程式 作業十一
Date: 2015-12/4 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w12
Authors: 40423201
Summary: 作業十一摘要

以下為作業十一內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w12_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w12_p.html){:target="_blank"}

&lt;iframe src="https://player.vimeo.com/video/151012941" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/151012941"&gt;ˋ&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</t>
<t tx="leo.20160109220736.1">@language md
Title: 2015 計算機程式 作業十二
Date: 2015-12/11 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w13
Authors: 40423201
Summary: 作業十二摘要

以下為作業內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w13_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w13_p.html){:target="_blank"}
</t>
<t tx="leo.20160109220742.1">@language md
Title: 2015 計算機程式 第14週 作業十三
Date: 2015-12/18 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w14
Authors: 40423201
Summary: Brython 繪圖

以下為作業內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w14_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w14_p.html){:target="_blank"}

以下利用 Brython 在網頁寫 Python 繪圖

&lt;!-- 導入 brython.js --&gt;

&lt;script type="text/javascript" src="./../../js/Brython3.2.3-20151122-082712/brython.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 brython() --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;

&lt;canvas id="plotarea" width="300" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
from browser import console
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 開始畫直線
ctx.beginPath()
ctx.lineWidth = 5
ctx.moveTo(0, 0)
ctx.lineTo(100, 100)
ctx.strokeStyle = "#FF0000"
ctx.stroke()

ctx.beginPath()
ctx.lineWidth = 1
ctx.moveTo(100, 0)
ctx.lineTo(0, 100)
ctx.strokeStyle = "#0000ff"
ctx.stroke()

x = 100
y = 100

# 利用 browser 模組中的 console.log 將資料列印在 console 區, 可以用來確認程式中各變數的值, 用法等同 print
#console.log("x 值為"+str(x)+", y 值為"+str(y))

# 定義一個畫圓的函式
def circle(ctx, x, y, radius, color='black'):
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * math.pi, False)
    ctx.fillStyle = color
    ctx.fill()
    ctx.lineWidth = 1
    ctx.strokeStyle = '#003300'
    ctx.stroke()

# 點資料數列, [ ] 為數列(list), ( ) 為元組(tuple)
points = [(10, 10), (20, 50), (20, 100), (30, 160), (70, 25), (100, 180)]

# 呼叫 circle() 函式, 畫出曲線的控制點
for i in range(len(points)):
    circle(ctx, points[i][0], points[i][1], 5)
    # 利用 console.log 列出控制點座標
    console.log("第"+str(i+1)+"點座標為: ("+str(points[i][0])+", "+str(points[i ][1])+")")

# 開始根據控制點, 畫出對應曲線
ctx.beginPath()
ctx.moveTo(points[0][0], points[0][1])

for i in range(1, len(points)-1):
    xc = (points[i][0] + points[i + 1][0]) / 2
    yc = (points[i][1] + points[i + 1][1]) / 2
    ctx.quadraticCurveTo(points[i][0], points[i][1], xc, yc)

#curve through the last two points
ctx.quadraticCurveTo(points[i][0], points[i][1], points[i+1][0],points[i+1][1])
ctx.stroke()
&lt;/script&gt;

上述繪圖程式碼:

    #!html
    &lt;!-- 導入 brython.js --&gt;
    
    &lt;script type="text/javascript" src="js/Brython3.2.3-20151122-082712/brython.js"&gt;&lt;/script&gt;
    
    &lt;!-- 啟動 brython() --&gt;
    
    &lt;script&gt;
    window.onload=function(){
    brython(1);
    }
    &lt;/script&gt;
    
    &lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;
    
    &lt;canvas id="plotarea" width="300" height="200"&gt;&lt;/canvas&gt;
    
    &lt;script type="text/python3"&gt;
    # 導入 doc
    from browser import document as doc
    from browser import console
    import math
    
    # 準備繪圖畫布
    canvas = doc["plotarea"]
    ctx = canvas.getContext("2d")
    
    # 開始畫直線
    ctx.beginPath()
    ctx.lineWidth = 5
    ctx.moveTo(0, 0)
    ctx.lineTo(100, 100)
    ctx.strokeStyle = "#FF0000"
    ctx.stroke()
    
    ctx.beginPath()
    ctx.lineWidth = 1
    ctx.moveTo(100, 0)
    ctx.lineTo(0, 100)
    ctx.strokeStyle = "#0000ff"
    ctx.stroke()
    
    x = 100
    y = 100
    
    # 利用 browser 模組中的 console.log 將資料列印在 console 區, 可以用來確認程式中各變數的值, 用法等同 print
    #console.log("x 值為"+str(x)+", y 值為"+str(y))
    
    # 定義一個畫圓的函式
    def circle(ctx, x, y, radius, color='black'):
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, 2 * math.pi, False)
        ctx.fillStyle = color
        ctx.fill()
        ctx.lineWidth = 1
        ctx.strokeStyle = '#003300'
        ctx.stroke()
    
    # 點資料數列, [ ] 為數列(list), ( ) 為元組(tuple)
    points = [(10, 10), (20, 50), (20, 100), (30, 160), (70, 25), (100, 180)]
    
    # 呼叫 circle() 函式, 畫出曲線的控制點
    for i in range(len(points)):
        circle(ctx, points[i][0], points[i][1], 5)
        # 利用 console.log 列出控制點座標
        console.log("第"+str(i+1)+"點座標為: ("+str(points[i][0])+", "+str(points[i ][1])+")")
    
    # 開始根據控制點, 畫出對應曲線
    ctx.beginPath()
    ctx.moveTo(points[0][0], points[0][1])
    
    for i in range(1, len(points)-1):
        xc = (points[i][0] + points[i + 1][0]) / 2
        yc = (points[i][1] + points[i + 1][1]) / 2
        ctx.quadraticCurveTo(points[i][0], points[i][1], xc, yc)
    
    #curve through the last two points
    ctx.quadraticCurveTo(points[i][0], points[i][1], points[i+1][0],points[i+1][1])
    ctx.stroke()
    &lt;/script&gt;

</t>
<t tx="leo.20160109220749.1">@language md
Title: 2015 計算機程式 第15週 作業十四
Date: 2015-12/25 2:36
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w15
Authors: 40423201
Summary: 作業十四摘要

以下為作業內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w15_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w15_p.html){:target="_blank"}

&lt;!-- 導入 brython.js --&gt;

&lt;script type="text/javascript" src="./../../js/Brython3.2.3-20151122-082712/brython.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 brython() --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;

&lt;canvas id="plotarea" width="400" height="410"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
from browser import console
import math

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")
    

ctx.beginPath()
grd=ctx.createLinearGradient(0,0,0,400)
grd.addColorStop(1,"#FF0000")
grd.addColorStop(0,"#FFFF00")
ctx.lineWidth = 20
ctx.strokeStyle = grd
ctx.moveTo(0,0)
ctx.lineTo(0,400)
ctx.stroke()

ctx.beginPath()
grd=ctx.createLinearGradient(400,0,0,0)
grd.addColorStop(1,"#FFFF00")
grd.addColorStop(0,"#00FF00")
ctx.strokeStyle = grd
ctx.moveTo(0,0)
ctx.lineTo(400,0)
ctx.stroke()

ctx.beginPath()
grd=ctx.createLinearGradient(0,400,0,0)
grd.addColorStop(1,"#FFFF00")
grd.addColorStop(0,"#00FF00")
ctx.strokeStyle = grd
ctx.moveTo(400,0)
ctx.lineTo(400,400)
ctx.stroke()

ctx.beginPath()
grd=ctx.createLinearGradient(0,0,400,0)
grd.addColorStop(0,"#00FF00")
grd.addColorStop(1,"#00FF00")
ctx.strokeStyle = grd
ctx.moveTo(0,410)
ctx.lineTo(400,410)
ctx.stroke()


ctx.beginPath()
ctx.moveTo(140, 60)
ctx.quadraticCurveTo(170, 45, 200, 15)
ctx.moveTo(200, 12)
ctx.quadraticCurveTo(230, 43, 260, 61)
ctx.moveTo(260, 60)
ctx.lineTo(140, 60)

ctx.moveTo(100, 120)
ctx.quadraticCurveTo(150, 95, 180, 60)
ctx.moveTo(220, 60)
ctx.quadraticCurveTo(250, 95, 300, 120)
ctx.moveTo(100, 120)
ctx.lineTo(300, 120)

ctx.moveTo(60, 190)
ctx.quadraticCurveTo(120, 165, 160, 120)
ctx.moveTo(240, 120)
ctx.quadraticCurveTo(280, 165, 340, 190)
ctx.moveTo(60, 190)
ctx.lineTo(340, 190)

ctx.moveTo(20, 270)
ctx.quadraticCurveTo(80, 250, 140, 190)
ctx.moveTo(260, 190)
ctx.quadraticCurveTo(320, 250, 380, 270)
ctx.moveTo(20, 270)
ctx.lineTo(380, 270)

ctx.lineWidth = 5
ctx.strokeStyle = "#008800"
ctx.stroke()


ctx.fillStyle = "#663300"
ctx.fillRect(180,271.5,40,129)


ctx.beginPath()
ctx.fillStyle = "#9900FF"
ctx.fillRect(260,340,60,60)
ctx.stroke()

ctx.moveTo(260,370)
ctx.lineTo(320,370)

ctx.moveTo(290,340)
ctx.lineTo(290,400)

ctx.moveTo(290,340)
ctx.lineTo(260,320)

ctx.moveTo(290,340)
ctx.lineTo(280,300)

ctx.moveTo(258,321)
ctx.lineTo(282,300)

ctx.moveTo(290,340)
ctx.lineTo(300,300)

ctx.moveTo(290,340)
ctx.lineTo(320,320)

ctx.moveTo(298,300)
ctx.lineTo(322,320)

ctx.lineWidth = 5
ctx.strokeStyle = "#FFCC00"
ctx.stroke()


ctx.beginPath()
ctx.fillStyle = "#000099"
ctx.fillRect(60,340,100,60)

ctx.moveTo(60,370)
ctx.lineTo(160,370)

ctx.moveTo(110,340)
ctx.lineTo(110,400)

ctx.moveTo(111.5,341.5)
ctx.lineTo(100,310)

ctx.moveTo(111.5,341.5)
ctx.lineTo(80,330)

ctx.moveTo(101.5,310)
ctx.lineTo(78.5,330)

ctx.moveTo(111.5,341.5)
ctx.lineTo(140,330)

ctx.moveTo(111.5,341.5)
ctx.lineTo(120,310)

ctx.moveTo(141.5,330)
ctx.lineTo(118.5,310)

ctx.lineWidth = 5
ctx.strokeStyle = "#CC0000"
ctx.stroke()


ctx.fillStyle = "#66CCFF"
ctx.font = "23px Dutch801 XBd BT"
ctx.fillText("Merry ",13,28)
ctx.font = "23px Dutch801 XBd BT"
ctx.fillText("X'mas",13,48)
ctx.font = "23px Dutch801 XBd BT"
ctx.fillText("&amp;",13,68)
ctx.font = "23px Dutch801 XBd BT"
ctx.fillText("Happy New ",13,88)
ctx.font = "23px Dutch801 XBd BT"
ctx.fillText("Year ",13,108)
ctx.stroke()


ctx.beginPath()

ctx.moveTo(210, 24)
ctx.quadraticCurveTo(200, 50, 160, 60)

ctx.moveTo(160,78)
ctx.quadraticCurveTo(200, 110, 270, 120)

ctx.moveTo(285, 160)
ctx.quadraticCurveTo(250, 180, 200, 190)

ctx.moveTo(280, 210)
ctx.quadraticCurveTo(220, 240, 70, 270)

ctx.lineWidth = 4
ctx.strokeStyle = "#CC0000"
ctx.stroke()


ctx.beginPath()

ctx.moveTo(225, 35)
ctx.quadraticCurveTo(220, 55, 200, 58)

ctx.moveTo(230, 70)
ctx.quadraticCurveTo(200, 105, 130, 120)

ctx.moveTo(130, 150)
ctx.quadraticCurveTo(180, 180, 300, 190)

ctx.moveTo(320, 240)
ctx.quadraticCurveTo(300, 260, 210, 270)

ctx.lineWidth = 4
ctx.strokeStyle = "#FFFF33"
ctx.stroke()


ctx.beginPath()

ctx.moveTo(172,38)
ctx.quadraticCurveTo(200, 50, 240, 60)


ctx.moveTo(245, 85)
ctx.quadraticCurveTo(240, 100, 190, 120)

ctx.moveTo(260, 140)
ctx.quadraticCurveTo(180, 180, 100, 190)

ctx.moveTo(92, 230)
ctx.quadraticCurveTo(250, 260, 330, 270)

ctx.lineWidth = 3
ctx.strokeStyle = "#0099FF"
ctx.stroke()


ctx.beginPath()
ctx.fillStyle = "#FF359A"
ctx.font = "10px ScriptS"
ctx.fillText("40423201 ",325,398)
ctx.stroke()

&lt;/script&gt; 




&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;iframe src="https://player.vimeo.com/video/151214820" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/151214820"&gt;我的視訊&lt;/a&gt; from &lt;a href="https://vimeo.com/user45597735"&gt;40423201&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</t>
<t tx="leo.20160109220754.1">@language md
Title: 2016 計算機程式 第17週 作業十五
Date: 2016-1/8 1:27
Category: Python
Tags: pelican, publishing
Slug: 40423201_cp_w17
Authors: 40423201
Summary: 作業十四摘要

以下為作業內容

利用 iframe 嵌入投影片:

&lt;iframe src="40423201_cp_w17_p.html" width="500" height="300"&gt;&lt;/iframe&gt;

[作業投影片](40423201_cp_w17_p.html){:target="_blank"}

以下利用 Brython 在網頁中進行具彈性的 20 個小球彈跳模擬！
換言之, 若採用相同的程式技巧與流程, 耶誕卡上的所有繪圖物件, 都可以製作成動畫!!!

&lt;!-- 導入 brython.js --&gt;

&lt;script type="text/javascript" src="http://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 brython() --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;

&lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
# 導入數學模組
import math
# 產生各小球的亂數速度用
import random
# 導入 browser 中的計時器, 建立動畫用
import browser.timer

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 取畫布的寬與高度
width = canvas.width
height = canvas.height

n = 20
# 已知數列內容個數, 先分別與 None 對應
x = [None]*n
y = [None]*n
vy = [None]*n
vx = [None]*n
# 重力加速度, Y 方向向下為正
g = 0.05
# 空氣的黏滯阻尼係數
cor = 0.7 
# 球的彈力係數
fr = 0.95
# 球的半徑
r = 5

for i in range(n):
    x[i] = 300
    y[i] = 100
    # random.random() 將會產生介於 0 與 1 的浮點亂數
    vx[i] = 2*(random.random()-.5)
    vy[i] = 2*(random.random()-.5)

# 更新第 i 球 Y 座標的運算邏輯
def updateY(i):
    if ((y[i]+r) &lt; height):
        #y = height
        vy[i] += g
    else:
        vy[i] = -vy[i]*cor
        vx[i] *= fr
    y[i] += vy[i]
    if ((y[i]+r) &gt; height):
        y[i] = height-r

# 更新第 i 球 X 座標的運算邏輯
def updateX(i):
    if ((x[i]+r) &gt;= width or (x[i]-r) &lt;= 0):
        vx[i] = -vx[i]*cor
    x[i] += vx[i]
    if ((x[i]+r) &gt; width):
        x[i] = width-r
    elif ((x[i]-r) &lt; 0):
        x[i] = r

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()

# 寫字函式
def text(s):
    ctx.fillStyle = "#ff0000"
    ctx.font = "30px sans-serif"
    ctx.textBaseline = "bottom"
    ctx.fillText(s,0,height)

# 每隔特定時間, 進行動畫繪製
def animate():
    # 刷新畫布
    ctx.clearRect(0, 0, width, height)
    # 逐一重新繪製小球
    ctx.fillStyle = "#000000"
    for i in range(n):
        updateY(i)
        updateX(i)
        circle(x[i],y[i],r)

text("Click me!")

# 畫布點擊後執行的函式
def on_canvas_click(ev):
    browser.timer.set_interval(animate,0)

# 只要使用者點擊在畫布上任何地方, 即執行 on_canvas_click 函式
canvas.bind('click', on_canvas_click, False)
&lt;/script&gt;

上列繪圖的程式碼:

~~~html
&lt;!-- 導入 brython.js --&gt;

&lt;script type="text/javascript" src="./../../js/Brython3.2.3-20151122-082712/brython.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 brython() --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;

&lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
# 導入數學模組
import math
# 產生各小球的亂數速度用
import random
# 導入 browser 中的計時器, 建立動畫用
import browser.timer

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 取畫布的寬與高度
width = canvas.width
height = canvas.height

n = 20
# 已知數列內容個數, 先分別與 None 對應
x = [None]*n
y = [None]*n
vy = [None]*n
vx = [None]*n
# 重力加速度, Y 方向向下為正
g = 0.05
# 空氣的黏滯阻尼係數
cor = 0.7 
# 球的彈力係數
fr = 0.95
# 球的半徑
r = 5

for i in range(n):
    x[i] = 300
    y[i] = 100
    # random.random() 將會產生介於 0 與 1 的浮點亂數
    vx[i] = 2*(random.random()-.5)
    vy[i] = 2*(random.random()-.5)

# 更新第 i 球 Y 座標的運算邏輯
def updateY(i):
    if ((y[i]+r) &lt; height):
        #y = height
        vy[i] += g
    else:
        vy[i] = -vy[i]*cor
        vx[i] *= fr
    y[i] += vy[i]
    if ((y[i]+r) &gt; height):
        y[i] = height-r

# 更新第 i 球 X 座標的運算邏輯
def updateX(i):
    if ((x[i]+r) &gt;= width or (x[i]-r) &lt;= 0):
        vx[i] = -vx[i]*cor
    x[i] += vx[i]
    if ((x[i]+r) &gt; width):
        x[i] = width-r
    elif ((x[i]-r) &lt; 0):
        x[i] = r

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()

# 寫字函式
def text(s):
    ctx.fillStyle = "#ff0000"
    ctx.font = "30px sans-serif"
    ctx.textBaseline = "bottom"
    ctx.fillText(s,0,height)

# 每隔特定時間, 進行動畫繪製
def animate():
    # 刷新畫布
    ctx.clearRect(0, 0, width, height)
    # 逐一重新繪製小球
    ctx.fillStyle = "#000000"
    for i in range(n):
        updateY(i)
        updateX(i)
        circle(x[i],y[i],r)

text("Click me!")

# 畫布點擊後執行的函式
def on_canvas_click(ev):
    browser.timer.set_interval(animate,0)

# 只要使用者點擊在畫布上任何地方, 即執行 on_canvas_click 函式
canvas.bind('click', on_canvas_click, False)
&lt;/script&gt;
~~~
</t>
<t tx="leo.20160109222126.1">@language python
import os
os.system("pelican pelican/content -o ./ -s pelican/publishconf.py -t ../../theme/pelican-octopress")
g.es("user pelican 執行完畢")</t>
<t tx="leo.20160109222230.1">@language python
import os
os.system("pelican pelican/content -o ./ -s pelican/publishconf.py -t theme/pelican-octopress")
g.es("admin pelican 執行完畢")</t>
<t tx="leo.20160109222332.1">@language python
import os
os.system('''pelican pelican/content -o ./ -s pelican/publishconf.py -t theme/pelican-bootstrap3
''')
g.es("pelican 執行完畢")</t>
</tnodes>
</leo_file>
